version: 2.1

orbs:
  win: circleci/windows@2.2.0

defaults: &defaults
  parameters:
    node_version:
      type: string
      default: ''
  working_directory: ~/snyk

windows_defaults: &windows_defaults
  environment:
    npm_config_loglevel: silent
  executor:
    name: win/default

commands:
  install_deps:
    description: Install dependencies
    steps:
      - run:
          name: Use snyk-main npmjs user
          command: echo "//registry.npmjs.org/:_authToken=${NPM_TOKEN}" >> .npmrc
      - run:
          name: Install dependencies
          command: npm install
  build_ts:
    description: Build js files from ts
    steps:
      - run:
          name: Build
          command: npm run build
      - persist_to_workspace:
          root: .
          paths:
            - dist/
  install_gradle_windows:
    description: Install gradle
    steps:
      - run: choco install gradle
  install_maven_windows:
    description: Install maven
    steps:
      - run: choco install maven
  install_sbt_windows:
    description: Install SBT
    steps:
      - run: choco install sbt
  install_sdkman_unix:
    description: Install SDKMAN
    steps:
      - run:
          name: Installing SDKMAN
          command: |
            curl -s "https://get.sdkman.io?rcupdate=false" | bash
            echo -e '\nsource "/home/circleci/.sdkman/bin/sdkman-init.sh"' >> $BASH_ENV
            source $BASH_ENV
  install_jdk_unix:
    description: Install JDK
    steps:
      - run:
          name: Installing JDK
          command: sdk install java $(sdk list java | grep -o -m1 "11\.[0-9\.]\+hs-adpt")
  install_gradle_unix:
    description: Install gradle
    steps:
      - run:
          name: Installing Gradle
          command: sdk install gradle 6.4.1
  install_maven_unix:
    description: Install maven
    steps:
      - run:
          name: Installing maven
          command: sdk install maven 3.6.3
  install_sbt_unix:
    description: Install SBT
    steps:
      - run:
          name: Installing sbt
          command: sdk install sbt 1.3.12
  install_node_npm:
    description: Install correct Node version
    parameters:
      node_version:
        type: string
        default: ''
    steps:
      - run:
          name: Install correct version of Node
          command: nvm install << parameters.node_version >>
      - run:
          name: Use correct version of Node
          command: nvm use << parameters.node_version >>
  install_shellspec:
    description: Install Shellspec
    steps:
      - run: curl -fsSL https://git.io/shellspec | sh -s -- -y
      - run: sudo ln -s ${HOME}/.local/lib/shellspec/shellspec /usr/local/bin/shellspec
      - run: sudo apt-get install jq
  show_node_version:
    description: Log Node and npm version
    steps:
      - run:
          name: Node version
          command: node --version
      - run:
          name: NPM version
          command: npm --version
  generate_help:
    description: Generate CLI help files
    steps:
      - run:
          name: Run CLI help text builder
          command: npm run generate-help
  install_github_cli:
    description: Install GitHub CLI (gh)
    steps:
      - run:
          name: Install GitHub CLI (gh)
          command: |
            mkdir gh-download
            curl -Lo ./gh-download/gh_1.3.1_linux_amd64.tar.gz https://github.com/cli/cli/releases/download/v1.3.1/gh_1.3.1_linux_amd64.tar.gz
            tar -xf ./gh-download/gh_1.3.1_linux_amd64.tar.gz --directory gh-download
            chmod a+x gh-download/gh_1.3.1_linux_amd64/bin/gh
            mkdir -p /home/circleci/bin
            mv gh-download/gh_1.3.1_linux_amd64/bin/gh /home/circleci/bin
            which gh
            gh --version
  configure_git_credentials:
    description: Configure Git Credentials
    steps:
      - run:
          name: Configure Git Credentials
          command: |
            git config --global user.email "$GH_USER_EMAIL"
            git config --global user.name "$GH_USER"
            echo -e "$GPG_KEY" | gpg --import
            git config --global commit.gpgsign true
            git config --global user.signingkey $GPG_ID

jobs:
  regression-test:
    <<: *defaults
    docker:
      - image: circleci/node:<< parameters.node_version >>
    steps:
      - checkout
      - setup_remote_docker:
          version: 19.03.13
          # docker_layer_caching: true
      - install_shellspec
      - install_deps
      - build_ts
      - generate_help
      - run:
          name: Run auth
          command: npm run snyk-auth
      - run:
          name: Run tests
          command: npm run test:common
      - run:
          name: Clear Snyk config
          command: rm ~/.config/configstore/snyk.json
      - run:
          name: Clear node_modules
          command: rm -rf node_modules/
      - run:
          name: Install only production dependencies
          command: npm install
          environment:
            NODE_ENV: production
      - run:
          name: npm install for fixture project
          working_directory: ~/snyk/test/fixtures/basic-npm
          command: npm install
      - run:
          name: Setup alias for snyk
          working_directory: ~/snyk/
          command: sudo ./test/smoke/setup-alias-for-snyk.sh
      - run:
          name: Run shellspec
          working_directory: ~/snyk/test/smoke
          command: |
            echo "Checkout the README in test/smoke folder for more details about this step"
            unset SNYK_API
            unset SNYK_API_KEY
            shellspec -f d -e REGRESSION_TEST=1

  test-windows:
    <<: *defaults
    <<: *windows_defaults
    steps:
      - run: git config --global core.autocrlf false
      - install_gradle_windows
      - install_maven_windows
      - install_sbt_windows
      - install_node_npm:
          node_version: << parameters.node_version >>
      - show_node_version
      - checkout
      - attach_workspace:
          at: ~/snyk
      - install_deps
      - build_ts
      - run:
          name: npm version
          command: npm --version
      - run:
          name: Run auth
          command: npm run snyk-auth-windows
      - run:
          name: Run tests
          command: npm run test-windows

  test-unix:
    <<: *defaults
    docker:
      - image: circleci/node:<< parameters.node_version >>
    steps:
      - install_sdkman_unix
      - install_jdk_unix
      - install_gradle_unix
      - install_maven_unix
      - install_sbt_unix
      - show_node_version
      - checkout
      - attach_workspace:
          at: ~/snyk
      - install_deps
      - build_ts
      - run:
          name: npm version
          command: npm --version
      - run:
          name: Run auth
          command: npm run snyk-auth
      - run:
          name: Run tests
          command: npm test

  release:
    <<: *defaults
    docker:
      - image: circleci/node:<< parameters.node_version >>
    resource_class: small
    steps:
      - checkout
      - setup_remote_docker:
          version: 19.03.13
          # docker_layer_caching: true
      - install_deps
      - generate_help
      - run: sudo npm i -g semantic-release @semantic-release/exec pkg
      - run: sudo apt-get install -y osslsigncode
      - run:
          name: Publish to GitHub
          command: semantic-release

  dev-release:
    <<: *defaults
    docker:
      - image: circleci/node:<< parameters.node_version >>
    resource_class: small
    steps:
      - checkout
      # - add_ssh_keys
      - setup_remote_docker:
          version: 19.03.13
      # - configure_git_credentials
      - install_github_cli
      - run:
          name: Check npm version
          command: |
            npm --version
            sudo npm install -g npm@7
            npm --version
      - run:
          name: Install npm@7
          command: |
            sudo npm install -g npm@7
      - show_node_version
      - run:
          name: Setup Lerna
          command: sudo npm install -g lerna
      - run:
          name: npm install
          command: |
            npm install
            ls -la
            ls -la packages/cli-protect

      # Pseudo because lerna doesn't have an actualy --dry run and --canary is not the same thing
      # the `--skip-git` and `--skip-npm` options make it pseudo `--dry-run`
      - run:
          name: Pseudo Lerna Publish
          command: |
            echo "skipping dev publish for now"

            # use this to avoid even making a dev release for now
            # lerna publish minor --skip-git --skip-npm --yes
            
            # use this when ready to start making dev releases:
            # lerna publish preminor --force-publish --canary --yes

      - run:
          name: Create Binaries
          command: |
            ./release-scripts/make-binaries.sh
            ls -la ./binary-releases

      - store_artifacts:
          path: ./binary-releases

workflows:
  version: 2
  test_and_release:
    jobs:
      - dev-release:
          name: Dev Release
          node_version: '14'
          filters:
            branches:
              ignore:
                - master

      # - regression-test:
      #     name: Regression Test
      #     context: nodejs-install
      #     node_version: '8'
      #     filters:
      #       branches:
      #         ignore:
      #           - master
      # - test-windows:
      #     name: Windows Tests for Node v12 support
      #     context: nodejs-install
      #     node_version: '12.0.0'
      #     requires:
      #       - Regression Test
      #     filters:
      #       branches:
      #         ignore:
      #           - master
      # - test-windows:
      #     name: Windows Tests for Node v14 support
      #     context: nodejs-install
      #     node_version: '14'
      #     requires:
      #       - Regression Test
      #     filters:
      #       branches:
      #         ignore:
      #           - master
      # - test-windows:
      #     name: Windows Tests for Node v10 support
      #     context: nodejs-install
      #     node_version: '10.21.0'
      #     requires:
      #       - Regression Test
      #     filters:
      #       branches:
      #         ignore:
      #           - master
      # - test-windows:
      #     name: Windows Tests for Node v8 support
      #     context: nodejs-install
      #     node_version: '8.17.0'
      #     requires:
      #       - Regression Test
      #     filters:
      #       branches:
      #         ignore:
      #           - master
      # - test-unix:
      #     name: Unix Tests for Node v12 support
      #     context: nodejs-install
      #     node_version: '12.16.2'
      #     requires:
      #       - Regression Test
      #     filters:
      #       branches:
      #         ignore:
      #           - master
      # - test-unix:
      #     name: Unix Tests for Node v14 support
      #     context: nodejs-install
      #     node_version: '14'
      #     requires:
      #       - Regression Test
      #     filters:
      #       branches:
      #         ignore:
      #           - master
      # - test-unix:
      #     name: Unix Tests for Node v10 support
      #     context: nodejs-install
      #     node_version: '10'
      #     requires:
      #       - Regression Test
      #     filters:
      #       branches:
      #         ignore:
      #           - master
      # - test-unix:
      #     name: Unix Tests for Node v8 support
      #     context: nodejs-install
      #     node_version: '8'
      #     requires:
      #       - Regression Test
      #     filters:
      #       branches:
      #         ignore:
      #           - master

      # - release:
      #     name: Release
      #     context: nodejs-app-release
      #     node_version: '14'
      #     filters:
      #       branches:
      #         only:
      #           - master
